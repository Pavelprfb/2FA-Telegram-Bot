const TelegramBot = require('node-telegram-bot-api');
const { authenticator } = require('otplib');
const Jimp = require('jimp');
const QrCode = require('qrcode-reader');
const path = require('path');

const BOT_TOKEN = '8220683070:AAGhYCb8mfVyzlaWbSl6JY6lVlMkSCM-yzQ';
const CHANNEL_USERNAME = '@testprfb';
const GROUP_ID = -4932910189;

const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const userSecrets = new Map();
const firstTimeUsers = new Set();

// ‚úÖ otplib config
authenticator.options = {
  step: 30,
  window: 1,
  digits: 6,
  algorithm: 'sha1'
};

// ‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
async function isUserInChannel(userId) {
  try {
    const member = await bot.getChatMember(CHANNEL_USERNAME, userId);
    return ['creator', 'administrator', 'member'].includes(member.status);
  } catch {
    return false;
  }
}

// ‚úÖ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
async function onlyIfSubscribed(msg, actionCallback) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const isSubscribed = await isUserInChannel(userId);

  if (!isSubscribed) {
    if (!firstTimeUsers.has(chatId)) {
      firstTimeUsers.add(chatId);

      const name = msg.from.username
        ? `@${msg.from.username}`
        : `[${msg.from.first_name}](tg://user?id=${userId})`;

      bot.sendMessage(GROUP_ID, `üîî ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡ßá‡ßü‡ßá‡¶õ‡ßá: ${name}`, {
        parse_mode: 'Markdown'
      });

      return bot.sendMessage(chatId, `üëã ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡¶®!\nüîí ‡¶Ü‡¶ó‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶®, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîç Telegram", url: "https://t.me/testprfb" }],
            [{ text: "‚úÖ Joined", callback_data: "joined_dummy" }]
          ]
        }
      });
    }
    return;
  }

  actionCallback();
}

// ‚úÖ ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function sendCode(chatId, secret, messageId = null) {
  try {
    const code = authenticator.generate(secret);
    const remaining = authenticator.timeRemaining();

    const text = `üîê *Secret:* \`${secret}\`\n\n‚úÖ *Your 6-digit code:* \`${code}\`\nüïí *Time left:* \`${remaining}s\``;

    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìã Copy', callback_data: 'copy_code' }],
          [{ text: 'üîÑ Update', callback_data: 'update_code' }]
        ]
      }
    };

    if (messageId) {
      bot.editMessageText(text, {
        ...options,
        chat_id: chatId,
        message_id: messageId
      });
    } else {
      bot.sendMessage(chatId, text, options);
    }
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ Secret ‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï Base32 ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
  }
}

// ‚ñ∂Ô∏è /start
bot.onText(/\/start/, (msg) => {
  onlyIfSubscribed(msg, () => {
    bot.sendMessage(msg.chat.id, 'üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! QR Code ‡¶¨‡¶æ Secret ‡¶™‡¶æ‡¶†‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡•§');
  });
});

// üì© ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
bot.on('message', (msg) => {
  onlyIfSubscribed(msg, async () => {
    const chatId = msg.chat.id;

    // ‡¶Ø‡¶¶‡¶ø QR ‡¶ï‡ßã‡¶° ‡¶π‡ßü
    if (msg.photo) {
      const photo = msg.photo[msg.photo.length - 1];
      const filePath = await bot.downloadFile(photo.file_id, __dirname);

      try {
        const img = await Jimp.read(filePath);
        const qr = new QrCode();

        qr.callback = function (err, value) {
          if (err || !value || !value.result) {
            return bot.sendMessage(chatId, '‚ùå QR ‡¶ï‡ßã‡¶° ‡¶™‡ßú‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
          }

          const match = value.result.match(/otpauth:\/\/totp\/[^?]+\?secret=([A-Z2-7]+)/i);
          if (match) {
            const secret = match[1];
            userSecrets.set(chatId, secret);
            sendCode(chatId, secret);
          } else {
            bot.sendMessage(chatId, '‚ùå QR ‡¶•‡ßá‡¶ï‡ßá Secret ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§');
          }
        };

        qr.decode(img.bitmap);
      } catch {
        bot.sendMessage(chatId, '‚ùå QR ‡¶ï‡ßã‡¶° ‡¶™‡ßú‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§');
      }

      return;
    }

    // ‡¶Ø‡¶¶‡¶ø Secret ‡¶™‡¶æ‡¶†‡¶æ‡ßü
    if (msg.text && !msg.text.startsWith('/start')) {
      const secret = msg.text.trim();
      try {
        authenticator.generate(secret); // validate
        userSecrets.set(chatId, secret);
        sendCode(chatId, secret);
      } catch {
        bot.sendMessage(chatId, '‚ùå Invalid 2FA secret. Base32 format ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
      }
    }
  });
});

// üîÑ Callback Query ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;

  if (query.data === 'joined_dummy') {
    return bot.answerCallbackQuery(query.id, { text: '‚úÖ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!', show_alert: false });
  }

  const isSubscribed = await isUserInChannel(chatId);
  if (!isSubscribed) return;

  const secret = userSecrets.get(chatId);
  if (!secret) {
    return bot.answerCallbackQuery(query.id, { text: '‚ùå Secret ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶ó‡ßá Secret ‡¶¶‡¶ø‡¶®‡•§' });
  }

  if (query.data === 'copy_code') {
    const code = authenticator.generate(secret);
    bot.sendMessage(chatId, `‚úÖ Code copied: \`${code}\``, { parse_mode: 'Markdown' });
    return bot.answerCallbackQuery(query.id, { text: 'üìã Code ready to copy!', show_alert: false });
  }

  if (query.data === 'update_code') {
    sendCode(chatId, secret, messageId);
    return bot.answerCallbackQuery(query.id);
  }
});